{"ast":null,"code":"var util = require('../util');\nvar JsonBuilder = require('../json/builder');\nvar JsonParser = require('../json/parser');\nvar populateHostPrefix = require('./helpers').populateHostPrefix;\nfunction buildRequest(req) {\n  var httpRequest = req.httpRequest;\n  var api = req.service.api;\n  var target = api.targetPrefix + '.' + api.operations[req.operation].name;\n  var version = api.jsonVersion || '1.0';\n  var input = api.operations[req.operation].input;\n  var builder = new JsonBuilder();\n  if (version === 1) version = '1.0';\n  httpRequest.body = builder.build(req.params || {}, input);\n  httpRequest.headers['Content-Type'] = 'application/x-amz-json-' + version;\n  httpRequest.headers['X-Amz-Target'] = target;\n  populateHostPrefix(req);\n}\nfunction extractError(resp) {\n  var error = {};\n  var httpResponse = resp.httpResponse;\n  error.code = httpResponse.headers['x-amzn-errortype'] || 'UnknownError';\n  if (typeof error.code === 'string') {\n    error.code = error.code.split(':')[0];\n  }\n  if (httpResponse.body.length > 0) {\n    try {\n      var e = JSON.parse(httpResponse.body.toString());\n      var code = e.__type || e.code || e.Code;\n      if (code) {\n        error.code = code.split('#').pop();\n      }\n      if (error.code === 'RequestEntityTooLarge') {\n        error.message = 'Request body must be less than 1 MB';\n      } else {\n        error.message = e.message || e.Message || null;\n      }\n    } catch (e) {\n      error.statusCode = httpResponse.statusCode;\n      error.message = httpResponse.statusMessage;\n    }\n  } else {\n    error.statusCode = httpResponse.statusCode;\n    error.message = httpResponse.statusCode.toString();\n  }\n  resp.error = util.error(new Error(), error);\n}\nfunction extractData(resp) {\n  var body = resp.httpResponse.body.toString() || '{}';\n  if (resp.request.service.config.convertResponseTypes === false) {\n    resp.data = JSON.parse(body);\n  } else {\n    var operation = resp.request.service.api.operations[resp.request.operation];\n    var shape = operation.output || {};\n    var parser = new JsonParser();\n    resp.data = parser.parse(body, shape);\n  }\n}\n\n/**\n * @api private\n */\nmodule.exports = {\n  buildRequest: buildRequest,\n  extractError: extractError,\n  extractData: extractData\n};","map":{"version":3,"names":["util","require","JsonBuilder","JsonParser","populateHostPrefix","buildRequest","req","httpRequest","api","service","target","targetPrefix","operations","operation","name","version","jsonVersion","input","builder","body","build","params","headers","extractError","resp","error","httpResponse","code","split","length","e","JSON","parse","toString","__type","Code","pop","message","Message","statusCode","statusMessage","Error","extractData","request","config","convertResponseTypes","data","shape","output","parser","module","exports"],"sources":["/Users/st-personal/CodingFolder/Personal/Saad-Photography-AWS/node_modules/aws-sdk/lib/protocol/json.js"],"sourcesContent":["var util = require('../util');\nvar JsonBuilder = require('../json/builder');\nvar JsonParser = require('../json/parser');\nvar populateHostPrefix = require('./helpers').populateHostPrefix;\n\nfunction buildRequest(req) {\n  var httpRequest = req.httpRequest;\n  var api = req.service.api;\n  var target = api.targetPrefix + '.' + api.operations[req.operation].name;\n  var version = api.jsonVersion || '1.0';\n  var input = api.operations[req.operation].input;\n  var builder = new JsonBuilder();\n\n  if (version === 1) version = '1.0';\n  httpRequest.body = builder.build(req.params || {}, input);\n  httpRequest.headers['Content-Type'] = 'application/x-amz-json-' + version;\n  httpRequest.headers['X-Amz-Target'] = target;\n\n  populateHostPrefix(req);\n}\n\nfunction extractError(resp) {\n  var error = {};\n  var httpResponse = resp.httpResponse;\n\n  error.code = httpResponse.headers['x-amzn-errortype'] || 'UnknownError';\n  if (typeof error.code === 'string') {\n    error.code = error.code.split(':')[0];\n  }\n\n  if (httpResponse.body.length > 0) {\n    try {\n      var e = JSON.parse(httpResponse.body.toString());\n      var code = e.__type || e.code || e.Code;\n      if (code) {\n        error.code = code.split('#').pop();\n      }\n      if (error.code === 'RequestEntityTooLarge') {\n        error.message = 'Request body must be less than 1 MB';\n      } else {\n        error.message = (e.message || e.Message || null);\n      }\n    } catch (e) {\n      error.statusCode = httpResponse.statusCode;\n      error.message = httpResponse.statusMessage;\n    }\n  } else {\n    error.statusCode = httpResponse.statusCode;\n    error.message = httpResponse.statusCode.toString();\n  }\n\n  resp.error = util.error(new Error(), error);\n}\n\nfunction extractData(resp) {\n  var body = resp.httpResponse.body.toString() || '{}';\n  if (resp.request.service.config.convertResponseTypes === false) {\n    resp.data = JSON.parse(body);\n  } else {\n    var operation = resp.request.service.api.operations[resp.request.operation];\n    var shape = operation.output || {};\n    var parser = new JsonParser();\n    resp.data = parser.parse(body, shape);\n  }\n}\n\n/**\n * @api private\n */\nmodule.exports = {\n  buildRequest: buildRequest,\n  extractError: extractError,\n  extractData: extractData\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}